is.vector(v2)
v3 <- c(TRUE, TRUE, FALSE, FALSE, TRUE)
v3
is.vector(v3)
m1 <- matrix(c(T, T, F, F, T, F), nrow = 2)
m1
m2 <- matrix(c("a", "b",
"c", "d"),
nrow = 2,
byrow = T)
m2
# Give data, then dimemensions (rows, columns, tables)
a1 <- array(c( 1:24), c(4, 3, 2))
a1
vNumeric   <- c(1, 2, 3)
vCharacter <- c("a", "b", "c")
vLogical   <- c(T, F, T)
dfa <- cbind(vNumeric, vCharacter, vLogical)
dfa  # Matrix of one data type
df <- as.data.frame(cbind(vNumeric, vCharacter, vLogical))
df  # Makes a data frame with three different data types
o1 <- c(1, 2, 3)
o2 <- c("a", "b", "c", "d")
o3 <- c(T, F, T, T, F)
list1 <- list(o1, o2, o3)
list1
list2 <- list(o1, o2, o3, list1)  # Lists within lists!
list2
(coerce1 <- c(1, "b", TRUE))
# coerce1  # Parenthese around command above make this moot
typeof(coerce1)
(coerce2 <- 5)
typeof(coerce2)
(coerce3 <- as.integer(5))
typeof(coerce3)
(coerce4 <- c("1", "2", "3"))
typeof(coerce4)
(coerce5 <- as.numeric(c("1", "2", "3")))
typeof(coerce5)
(coerce6 <- matrix(1:9, nrow= 3))
is.matrix(coerce6)
(coerce7 <- as.data.frame(matrix(1:9, nrow= 3)))
is.data.frame(coerce7)
# Clear environment
rm(list = ls())
# Clear console
cat("\014")  # ctrl+L
(x1 <- 1:3)
(y  <- 1:9)
# Combine variables
(df1 <- cbind.data.frame(x1, y))
typeof(df1$x1)
str(df1)
(x2  <- as.factor(c(1:3)))
(df2 <- cbind.data.frame(x2, y))
typeof(df2$x2)
str(df2)
x3  <- c(1:3)
df3 <- cbind.data.frame(x3, y)
(df3$x3 <- factor(df3$x3,
levels = c(1, 2, 3)))
typeof(df3$x3)
str(df3)
x4  <- c(1:3)
df4 <- cbind.data.frame(x4, y)
df4$x4 <- factor(df4$x4,
levels = c(1, 2, 3),
labels = c("macOS", "Windows", "Linux"))
df4
typeof(df4$x4)
str(df4)
x5  <- c(1:3)
df5 <- cbind.data.frame(x5, y)
(df5$x5 <- ordered(df5$x5,
levels = c(3, 1, 2),
labels = c("No", "Maybe", "Yes")))
df5
typeof(df5$x5)
str(df5)
# Clear environment
rm(list = ls())
# Clear console
cat("\014")  # ctrl+L
# Assigns number 0 through 10 to x1
x1 <- 0:10
x1
# Descending order
x2 <- 10:0
x2
?seq  # R help on seq
# Ascending values (duplicates 1:10)
(x3 <- seq(10))
# Specify change in values
(x4 <- seq(30, 0, by = -3))
# c = concatenate (or combine or collect)
?c  # R help on c
x5 <- c(5, 4, 1, 6, 7, 2, 2, 3, 2, 8)
x5
?scan  # R help on scan
x6 <- scan()  # After running this command, go to console
# Hit return after each number
# Hit return twice to stop
x6
?rep  # R help on rep
x7 <- rep(TRUE, 5)
x7
# Repeats set
x8 <- rep(c(TRUE, FALSE), 5)
x8
# Repeats items in set
x9 <- rep(c(TRUE, FALSE), each = 5)
x9
# Clear environment
rm(list = ls())
# Clear console
cat("\014")  # ctrl+L
library(datasets)  # Load base packages manually
# Use pacman to load add-on packages as desired
pacman::p_load(pacman, rio)
# CSV
rio_csv <- import("~/Desktop/ImportingData_Datasets/mbb.csv")
# Use pacman to load add-on packages as desired
pacman::p_load(pacman, rio)
# CSV
rio_csv <- import("~/Desktop/ImportingData_Datasets/mbb.csv")
# IMPORTING WITH RIO #######################################
?rio
install.packages("rio")
# Use pacman to load add-on packages as desired
pacman::p_load(pacman, rio)
# CSV
rio_csv <- import("~/Desktop/ImportingData_Datasets/mbb.csv")
a <- read.csv("~/Desktop/ImportingData_Datasets/mbb.csv")
a <- read.txt("~/Desktop/ImportingData_Datasets/mbb.txt")
a <- read.csv("~/Desktop/ImportingData_Datasets/mbb.txt")
a <- read.csv("C:\Users\Sanket Ghyar\Desktop\ImportingData_Datasets\mbb.csv")
a <- read.csv("~\Desktop\ImportingData_Datasets\mbb.csv")
read.csv("~\Desktop\ImportingData_Datasets\mbb.csv")
# CSV
rio_csv <- import("~/Desktop/ImportingData_Datasets/mbb.csv")
library(rio)
# CSV
rio_csv <- import("~/Desktop/ImportingData_Datasets/mbb.csv")
install.packages("rio") install_formats()
install.packages("rio")install_formats()
install.packages("rio").install_formats()
# Load a spreadsheet that has been saved as tab-delimited
# text file. Need to give complete address to file. This
# command gives an error on missing data but works on
# complete data.
r_txt1 <- read.table("~/Desktop/mbb.txt", header = TRUE)
# Load a spreadsheet that has been saved as tab-delimited
# text file. Need to give complete address to file. This
# command gives an error on missing data but works on
# complete data.
r_txt1 <- read.table("~/Desktop/ImportingData_Datasets/mbb.txt", header = TRUE)
# Load a spreadsheet that has been saved as tab-delimited
# text file. Need to give complete address to file. This
# command gives an error on missing data but works on
# complete data.
r_txt1 <- read.table("~/Desktop//mbb.txt", header = TRUE)
library(datasets)
data(iris)
sapply(iris,mean)
View(iris)
tapply(iris$Sepal.Length,iris$Species,mean)
rowMeans(iris[, 1:4])
apply(iris[, 1:4], 2, mean)
data(mtcars)
View(mtcars)
?mtcars
tapply(mtcars$mpg, mtcars$cyl, mean)
sapply(mtcars, cyl, mean)
with(mtcars, tapply(mpg, cyl, mean))
tapply(mtcars$hp, mtcars$cyl, mean)
209.21429-82.63636
set.seed(1)
rpois(5, 2)
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
y
plot(x,y)
install.packages("shiny")
shiny::runApp('testApp')
shiny::runApp('C:/Users/Sanket Ghyar/Downloads')
install.packages("tmap")
shiny::runApp('C:/Users/Sanket Ghyar/Downloads')
runApp('C:/Users/Sanket Ghyar/Downloads')
runApp('C:/Users/Sanket Ghyar/Downloads')
install.packages("stars")
library(sf)
install.packages("sf")
shiny::runApp('C:/Users/Sanket Ghyar/Downloads')
install.packages('spDataLarge', repos='https://nowosad.github.io/drat/',
type='source')
runApp('C:/Users/Sanket Ghyar/Downloads')
runApp('C:/Users/Sanket Ghyar/Downloads')
library(stars)
shiny::runApp('C:/Users/Sanket Ghyar/Downloads')
detach("package:dplyr", unload = TRUE)
detach("package:raster", unload = TRUE)
detach("package:sf", unload = TRUE)
detach("package:shiny", unload = TRUE)
detach("package:shinydashboard", unload = TRUE)
detach("package:shinythemes", unload = TRUE)
detach("package:sp", unload = TRUE)
detach("package:spData", unload = TRUE)
install.libraries(stars)
install.packages(stars)
install.packages("stars")
install.packages("stars")
library(tmap)
install.packages("tmap")
shiny::runApp('C:/Users/Sanket Ghyar/Downloads')
install.packages("stars", type = "https://cran.r-project.org/bin/windows/contrib/4.2/stars_0.5-6.zip")
install.packages("stars", type = "https://cran.r-project.org/bin/windows/contrib/4.2/stars_0.5-6.zip")
install.packages("sf")
install.packages("sf")
install.packages("Rtools")
q()
library(leaflet)
library(leaflet)
world_map = leaflet()
library(leaflet)
world_map = leaflet()
world_map
library(leaflet)
world_map = leaflet()
world_map
world_map = addTiles(world_map)
library(leaflet)
world_map  = leaflet()   %>%
addTiles()
library(datasets)
mean(mtcars$mpg)
?iris
detach("package:datasets", unload = TRUE)
install.packages("devtools")
?devtools
library(devtools)
session.info()
sessionInfo()
install.packages("KernSmooth")
remove.packages("KernSmooth", lib="C:/Program Files/R/R-4.2.1/library")
remove.packages("KernSmooth", lib="C:/Program Files/R/R-4.2.1/library")
remove.packages("KernSmooth")
remove.packages("KernSmooth", lib="C:/Program Files/R/R-4.2.1/library")
library(KernSmooth)
library(swirl)
swirl()
swirl()
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
remove.packages("swirl")
library(swirl)
install_from_swirl("Exploratory Data Analysis")
swirl()
head(pollution)
dim(pollution)
Summary(pollution$pm25)
pollution$pm25
summary(pollution$pm25)
ppm
quantile(ppm)
boxplot(ppm, col = "blue")
abline(h = 12)
hist(ppm, col = "green")
rug(ppm)
low
high
hist(ppm, col = "green", breaks = 100)
rug(ppm)
hist(ppm, col = "green)
hist(ppm, col = "green")
hist(ppm, col = "green")
abline(v = 12, lwd = 2)
abline(v = median(ppm), lwd = 4, col = "magenta")
abline(v = median(ppm), col = "magenta", lwd = 4)
names(pollution)
table(pollution$region)
reg <- table(pollution$region)
reg
barplot(reg, col = "wheat", main = " Number of Counties in ")
barplot(reg, col = "wheat", main = " Number of Counties in Each Region")
barplot(reg, col = "wheat", main = "Number of Counties in Each Region")
boxplot(pm25~region, data = pollution, col = "red")
par(mfrow=c(2,1),mar=c(4,4,2,1))
subset(pollution, pollution$region == "east")
east <- subset(pollution,region=="east")
head(east)
hist(east$pm25, col = "green")
hist(subset(pollution, region=="west")$pm25, col = "green")
s
plot(latitude, pm23)
plot(latitude, pm25, data = pollution)
plot(pollution$latitude, pollution$pm25)
with(pollution, plot(latitude, pm25))
abline(h = 12, lwd = 2, lty = 2)
plot(pollution$latitude, pollution$pm25, col = pollution$region)
plot(pollution$latitude, pm25, col = pollution$region)
plot(pollution$latitude, ppm, col = pollution$region)
abline(h = 12)
abline(h = 12, lwd = 2, lty = 2)
par(mfrow = c(1, 2), mar = c(5, 4, 2, 1))
west <- subset(pollution, region == "west")
plot(west$latitude, west$pm25, main = "west")
plot(west$latitude, west$pm25, main = "west")
plot(west$latitude, west$pm25, main = "West")
plot(east$latitude, east$pm25, main = "West")
plot(east$latitude, east$pm25, main = "East")
?Devices
with(faithful, plot(eruption, waiting))
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.curr()
dev.cur()
pdf(file = "myplot.pdf")
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.cur()
dev.off()
dev.cur()
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.copy(png, file = "geyserplot.png")
dev.off()
head(cares)
head(cars)
with(cars, plot(speed, dist))
text(mean(cars$speed), max(cars$dist), "SWIRL rules!")
head(state)
table(state$region)
xyplot(data=state, Life.Exp ~ Income| region)
xyplot(Life.Exp ~ Income | region, data = state, layout = c(4, 1))
xyplot(Life.Exp ~ Income | region, data = state, layout = c(2, 2))
head(mpg)
dim(mps)
dim(mpg)
table(mpg$model)
qplot(displ, hwy, data = mpg)
head(airquality)
rane(airquality$Month, na.rm = TRUE)
range(airquality$Month, na.rm = TRUE)
range(airquality$Ozone, na.rm = TRUE)
hist(airquality$oz)
hist(airquality$Ozone)
boxplot(airquality$Month)
table(airquality$Month)
boxplot(Ozone~Month, airquality)
boxplot(Ozone~Month, airquality, xlab = "Month", ylab = "Ozone (ppb)", col.axis = "blue", col.lab = "red")
title(main = "Ozone and Wind in New York City")
with(airquality, plot(Wind, Ozone))
with(airquality, plot(Wind, Ozone, main = "Ozone and Wind in New York City"))
title(main = "Ozone and Wind in New York City")
length(par())
par()
names(par())
par()$pin
par("fg")
?pch
par("pch")
par("lty")
plot(airquality$Wind, airquality$Ozone, set = "n")
plot(airquality$Wind, type = "n", airquality$Ozone )
title(main = "Ozone and Wind in New York City")
title(main = "Ozone and Wind in NYC")
V
title(main="Wind and Ozone in NYC")
may = subset(airquality, months==5)
may = subset(airquality, months=="5")
may = subset(airquality, Month==5)
may = subset(airquality, Month==5)
may <-  subset(airquality, Month==5)
points(may$Wind, may$Ozone)
points(may$Wind,may$Ozone,col="blue",pch=17)
notmay <- subset(airquality, Month != 5)
points(notmay$Wind, notmay$Ozone, col="red")
points(notmay$Wind, notmay$Ozone, col="red", pch = 8)
legend("topright", c(17,8), c("blue", "red"), c("May", "Other Months"))
legend("topright", c(17,8), c("blue", "red"))
legend("topright",pch=c(17,8),col=c("blue","red"),legend=c("May","Other Months"))
abline(v = median(airquality$Wind), lty = 2, lwd = 2)
par(mfrow = c(1,2))
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation")
par(mfrow = c(1,3), mar = c(4,4,2,1), oma = c(0,0,2,0))
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation")
plot(airquality$Solar.R,airquality$Ozone,  main = "Ozone and Solar Radiation")
plot(airquality$Temp,airquality$Ozone,  main = "Ozone and Temperature")
mtext("Ozone and Weather in the New York City", outer = TRUE)
mtext("Ozone and Weather in New York City", outer = TRUE)
power <- read.table("household_power_consumption.txt",skip=1,sep=";")
setwd("C:/Users/Sanket Ghyar/Desktop/Extra Coursees/Data Science Specialization/Exploratory Data Analysis with R/Week1/Course Project 1")
power <- read.table("household_power_consumption.txt",skip=1,sep=";")
# Read data
hpc <- read.table("household_power_consumption.txt",skip=1,sep=";")
rm(power)
View(hpc)
colnames(power) <- c("Date","Time","Global_active_power","Global_reactive_power","Voltage","Global_intensity",
"Sub_metering_1","Sub_metering_2","Sub_metering_3")
colnames(power) <- c("Date","Time","Global_active_power","Global_reactive_power","Voltage","Global_intensity",
"Sub_metering_1","Sub_metering_2","Sub_metering_3")
colnames(hpc) <- c("Date","Time","Global_active_power","Global_reactive_power","Voltage","Global_intensity",
"Sub_metering_1","Sub_metering_2","Sub_metering_3")
# subset data
hpc <- hpc[Date=="1/2/2007" | power$Date =="2/2/2007",]
# subset data
hpc <- hpc["Date"=="1/2/2007" | "Date" =="2/2/2007",]
global_active_power <- hpc$Global_active_power
str(global_active_power)
#calling the basic plot function
hist(as.numeric(as.character(subpower$Global_active_power)),col="red",main="Global Active Power",xlab="Global Active Power(kilowatts)")
# annotating graph
title(main="Global Active Power")
# Read data
hpc <- read.table("household_power_consumption.txt",skip=1,sep=";")
# rename columns
colnames(hpc) <- c("Date","Time","Global_active_power","Global_reactive_power","Voltage","Global_intensity",
"Sub_metering_1","Sub_metering_2","Sub_metering_3")
# subset data
hpc <- hpc[hpc$Date=="1/2/2007" | hpc$Date =="2/2/2007",]
global_active_power <- hpc$Global_active_power
str(global_active_power)
global_active_power <- as.numeric(hpc$Global_active_power)
#plot1
hist(global_active_power,col="red",main="Global Active Power",xlab="Global Active Power(kilowatts)")
# Read data
hpc <- read.table("household_power_consumption.txt",skip=1,sep=";")
# rename columns
colnames(hpc) <- c("Date","Time","Global_active_power","Global_reactive_power","Voltage","Global_intensity",
"Sub_metering_1","Sub_metering_2","Sub_metering_3")
# subset data
hpc <- hpc[hpc$Date=="1/2/2007" | hpc$Date =="2/2/2007",]
# cast Date as "as.date"
hpc$Date <- as.Date(hpc$Date, format="%d/%m/%Y")
hpc$Time <- strptime(hpc$Time, format="%H:%M:%S")
# calling the basic plot function
plot(hpc$Time,global_active_power),type="l",xlab="",ylab="Global Active Power (kilowatts)")
# calling the basic plot function
plot(hpc$Time,global_active_power,type="l",xlab="",ylab="Global Active Power (kilowatts)")
# calling the basic plot function
plot(hpc$Time,global_active_power,type="l",xlab="",ylab="Global Active Power (kilowatts)",
main="Global Active Power Vs Time")
# Read data
hpc <- read.table("household_power_consumption.txt",skip=1,sep=";")
# rename columns
colnames(hpc) <- c("Date","Time","Global_active_power","Global_reactive_power","Voltage","Global_intensity",
"Sub_metering_1","Sub_metering_2","Sub_metering_3")
# subset data
hpc <- hpc[hpc$Date=="1/2/2007" | hpc$Date =="2/2/2007",]
# cast Date as "as.date"
hpc$Date <- as.Date(hpc$Date, format="%d/%m/%Y")
View(hpc$Date)
(hpc$Date)
# cast and format time
hpc$Time <- strptime(hpc$Time, format="%H:%M:%S")
hpc$Time
hpc[1:1440,"Time"] <- format(hpc[1:1440,"Time"],"2007-02-01 %H:%M:%S")
hpc[1441:2880,"Time"] <- format(hpc[1441:2880,"Time"],"2007-02-02 %H:%M:%S")
hpc$Time
global_active_power <- as.numeric(hpc$Global_active_power)
# calling the basic plot function
plot(hpc$Time,global_active_power,type="l",xlab="",ylab="Global Active Power (kilowatts)",
main="Global Active Power Vs Time")
sub_metering_1 <- as.numeric(hpc$Sub_metering_1)
sub_metering_2 <- as.numeric(hpc$Sub_metering_2)
sub_metering_3 <- as.numeric(hpc$Sub_metering_3)
# calling the basic plot functions
plot(hpc$Time,hpc$Sub_metering_1,type="n",xlab="",ylab="Energy sub metering")
# Read data
hpc <- read.table("household_power_consumption.txt",skip=1,sep=";")
# rename columns
colnames(hpc) <- c("Date","Time","Global_active_power","Global_reactive_power","Voltage","Global_intensity",
"Sub_metering_1","Sub_metering_2","Sub_metering_3")
# subset data
hpc <- hpc[hpc$Date=="1/2/2007" | hpc$Date =="2/2/2007",]
# cast Date as "as.date"
hpc$Date <- as.Date(hpc$Date, format="%d/%m/%Y")
# cast and format time
hpc$Time <- strptime(hpc$Time, format="%H:%M:%S")
hpc[1:1440,"Time"] <- format(hpc[1:1440,"Time"],"2007-02-01 %H:%M:%S")
hpc[1441:2880,"Time"] <- format(hpc[1441:2880,"Time"],"2007-02-02 %H:%M:%S")
sub_metering_1 <- as.numeric(hpc$Sub_metering_1)
sub_metering_2 <- as.numeric(hpc$Sub_metering_2)
sub_metering_3 <- as.numeric(hpc$Sub_metering_3)
# calling the basic plot functions
plot(hpc$Time,sub_metering_1,type="n",xlab="",ylab="Energy sub metering")
lines(sub_metering_1)
lines(sub_metering_2)
lines(sub_metering_3)
str(hpc)
sort(sub_metering_1)
sort(sub_metering_1, decreasing = TRUE)
sort(sub_metering_2, decreasing = TRUE)
sort(sub_metering_3, decreasing = TRUE)
# calling the basic plot functions
plot(hpc$Time,sub_metering_1,type="n",xlab="",ylab="Energy sub metering")
lines(sub_metering_1)
lines(sub_metering_2)
lines(sub_metering_3)
# calling the basic plot functions
plot(hpc$Time,sub_metering_1,xlab="",ylab="Energy sub metering")
lines(sub_metering_1, col = "red")
lines(sub_metering_2, col = "blue")
# calling the basic plot functions
plot(hpc$Time,sub_metering_1,xlab="",ylab="Energy sub metering")
# calling the basic plot functions
plot(hpc$Time,sub_metering_1,type = "n",xlab="",ylab="Energy sub metering")
